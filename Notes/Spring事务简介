问题:例如当我们执行转账操作时,如果加钱减钱的方法途中遭遇异常,会导致账户金额出现问题
->解决方法:事务

事务作用:在数据层保障一系列的数据库操成功或失败
Spring事务作用:在数据层或业务层保障一系列的数据库操成功或失败
->之所以加上业务层是因为业务层也不过是数据层的不同组合,一次业务层事务的提交要么全部失败要么全部成功

Spring实现的方式:
1.在配置类里添加事务的Bean
2.在Spring配置类里添加@EnableTransactionManagement标签
3.在需要添加事务管理的接口方法上添加@Transactional注解(该注解也可以写在接口类上,表示该接口所有方法都开启事务)

概念:
->事务管理员:一般是带有@Transactional标签的接口方法,可以将其他事务纳入自己的事务中(最终变成自己的一个事务)
->事务协调员:一般是被收纳的接口方法

我们可以通过在@Transactional注解里添加属性实现对事物的进一步管理
例: @Transactional(rollbackFor = IOException.class)   //并不是遇到所有的异常事物都会回滚,所以我们要将那些特例的异常指定出来回滚

问题:同样是转账操作.我们需要在加钱减钱的功能上再加入一个记录日志的功能,并且要满足无论转账是否成功都要记录,这个时候如果还是用上文的方式(同成功同失败)就无法实现

->解决方法:让事务协调员新建一个事务,不被管理员统一管理(事务传播行为)
  实现:在该事务协调员(接口方法)上添加@Transactional(propagation = Propagation.REQUIRES_NEW)   ->表示协调员不参与管理员事务(默认的参数是Propagation.REQUIRES,表示管理员涵盖了该事务就自动加入)
               //意思就是说通过这种方式,虽然记录日志,加钱减钱的方法还是写在了同一个事务里,但是记录日志的方法在前两者发生异常时也会执行(回滚事务),不和他们同成功同失败
